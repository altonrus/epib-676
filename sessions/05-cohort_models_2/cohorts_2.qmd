---
title: "Cohort models 2"
subtitle: "EPIB  676 session 5, McGill University"
author: "Alton Russell"
date: "18 Jan 2023"
format: revealjs
editor: visual
---

## Today

-   **Capturing health-economic outcomes**

-   Correcting discrete time error

-   Capturing epidemiological outcomes

-   Differential equation models

## Packages

```{r}
#| echo: true
library(heemod) #health economic markov models
library(tidyr) #for spread function for wide-to-long table formating
library(ggplot2) #plotting

#use install.packages("Package") for any you don't have already

theme_set(theme_bw()) #set ggplot theme
```

## Recall: elements of discrete time cohort model

Transition matrix ($n_s \times n_s$, where $n_s$ is the number of states)

$$
P = \begin{array}{c}\begin{matrix}Healthy & moderate & severe & dead \end{matrix} 
\\\left[\ 
\begin{matrix}
p_{H \rightarrow H} & p_{H \rightarrow M} & p_{H \rightarrow S} & p_{H \rightarrow D}\\
p_{M \rightarrow H} & p_{M \rightarrow M} & p_{M \rightarrow S} & p_{M \rightarrow D}\\
p_{S \rightarrow H} & p_{S \rightarrow M} & p_{S \rightarrow S} & p_{S \rightarrow D}\\
p_{D \rightarrow H} & p_{D \rightarrow M} & p_{D \rightarrow S} & p_{D \rightarrow D}
\end{matrix}\ \right]
\end{array}
$$

initial distribution: $m_0 = \begin{bmatrix} 2000 & 0 & 0 & 0 \end{bmatrix}$

Cycle length: 1 year; Number of cycles: $T=20$

## Recall: elements of discrete time cohort model

Store distribution in matrix $M$, with $n_s$ columns and $T+1$ rows

-   Each row is $m_t$, distribution of cohort after cycle \$t\$, beginning with $m_0$

If transition probabilities depend on simulation time (e.g., background mortality) use 3D time-dependent transition array $P$, where $P[i,j,t]$ is probability of transitioning from $i$ to $j$ in cycle $t$

## Costs and utilities as 'rewards'

Costs, health state utility can be added to a cohort model in two ways:

-   Per cycle spent in a state (state reward)

-   Per transition (transition reward/toll)

Must assign same rewards to everyone in the same state or making transition. Only way to introduce heterogeneity is making more models or states

## State rewards

Per-cycle reward for each state stored as a $1 \times n_s$ reward vector:

$$
\textbf{c} = 
\begin{bmatrix}
c_{H} & c_{M} & c_{S} & c_{D}
\end{bmatrix}\\
\textbf{q} = 
\begin{bmatrix}
q_{H} & q_{M} & q_{S} & q_{D}
\end{bmatrix}
$$

For cycle $t$, multiply (using %\*%) state vector $m_t \times \textbf{c}^T$ for costs in each state; $m_t \times \textbf{q}^T$ for QALYs in each state

In r, `m_t %*% t(c_states)`

(or use $n_s \times 1$ column vectors so you don't need to transpose)

## Transition rewards

-   Costs or QALYs can change when specific transitions made

-   Create $n_s \times n_s$ reward matrix for each outcome (e.g., $C$ for cost, $Q$ for QALYs)

    -   Every entry of column for state $j$ has $c_j$ (or $q_j$)

    -   On diagonal $C[j,j]$, it's always just $c_j$

    -   Off diagonal $C[i,j]$, can add/subtract a reward for $i \rightarrow j$ transition

-   rewards per state in cycle $t$ given by $\hat{C}_{t} = m_{t-1} ( P \bigodot C)$ where $\bigodot$ indicates element-wise multiplication

## Reward matrices with transition rewards

$$ 
\textbf{C}= 
\begin{bmatrix}
c_H & c_M+c_{H \rightarrow M} & c_S+c_{H \rightarrow S} & c_D+c_{H \rightarrow D}\\ 
c_H+c_{M \rightarrow H} & c_M & c_S+c_{M \rightarrow S} & c_D+c_{M \rightarrow D}\\ 
c_H+c_{S \rightarrow H} & c_M+c_{S \rightarrow M} & c_S & c_D+c_{S \rightarrow D}\\ 
c_H+c_{D \rightarrow H} & c_M+c_{D \rightarrow M} & c_S+c_{D \rightarrow S} & c_D 
\end{bmatrix},\\
\textbf{Q} =
\begin{bmatrix}
q_H & q_M+q_{H \rightarrow M} & q_S+q_{H \rightarrow S} & q_D+q_{H \rightarrow D}\\ 
q_H+q_{M \rightarrow H} & q_M & q_S+q_{M \rightarrow S} & q_D+q_{M \rightarrow D}\\ 
q_H+q_{S \rightarrow H} & q_M+q_{S \rightarrow M} & q_S & q_D+q_{S \rightarrow D}\\ 
q_H+q_{D \rightarrow H} & q_M+q_{D \rightarrow M} & q_S+q_{D \rightarrow S} & q_D 
\end{bmatrix}
$$

## Vary rewards with simulation time

-   Reward matrix assumes costs/QALYs don't depend when person is in the state

-   Can have rewards depend on cycle by adding 3rd dimension (3D reward array)

-   $\textbf{C}[i,j,t]$ and $\textbf{Q}[i,j,t]$ are cost/QALYs of transition from state $i$ to $j$ in cycle $t$

-   $\hat{C}_t =m_{t-1} (P \bigodot C[:,:,t])$ or $\hat{Q}_t = m_{t-1} (P \bigodot Q[:,:,t])$ gives costs/QALYs in each state in cycle $t$

## Creating 2D matrix in-loop

If you don't like 3D arrays, an alternative is to generate cycle-specific 2D matrices within your for loop

```{r}
#| eval: false
#| echo: true
#Pseudocode, won't run without modifications
mat_M <- matrix(0, ncol=4, nrow = n_cycles+1,
           dimnames = list(0:n_cycles, c("H","M","S","D")))
v_costs_per_cycle <- matrix(0, nrow = ncycles, ncol=1)
v_QALYs_per_cycle <- matrix(0, nrow = ncycles, ncol=1)

mat_M[1, ] <- m_0 # initial distribution
for(i in 1:n_cycles){
  mat_P_cycle <- NA # Calculate transition matrix for this cycle
  mat_C_cycle <- NA # Calculate cost reward matrix for this cycle
  mat_Q_cycle <- NA # Calculate QALY reward matrix for this cycle
  
  M[i+1,] <- M[i,] %*% mat_T_cycle #update cohort distribution
  v_costs_per_cycle[i] <- sum(M[i+1,] %*% mat_C_cycle) #calculate costs
  v_QALYs_per_cycle[i] <- sum(M[i+1,] %*% mat_Q_cycle) #calculate QALYs
}
```

## Discounting

-   To get net present outcomes, we must discount.

-   Can create "discount multiplier vector" to apply for cost and outcomes from each cycle

```{r}
#| echo: true
disc_rate = 0.03; cycle_length = 0.5; n_cycles = 10
disc_mults <- 1/((1+(disc_rate*cycle_length))^(0:n_cycles))
disc_mults
v_costs_per_cycle = rep(1000, n=11)
v_costs_per_cycle*disc_mults
sum(v_costs_per_cycle*disc_mults)
```

## Today

-   Capturing health-economic outcomes

-   **Correcting discrete time error**

-   Capturing epidemiological outcomes

-   Differential equation models

## Discrete time error

-   Transition probabilities are cumulative probability of transitioning during a cycle

-   In an uncorrected model, transitions only occur at end of cycle

-   In actual process, transitions are randomly distributed across cycle duration

## Discrete time error

[![\[Naimark et. al. 2013\](www.doi.org/10.1177/0272989X13501558)](discretation_error_updown.png)](www.doi.org/10.1177/0272989X13501558)

## Shortening cycle lengths

As cycle length $\rightarrow$ 0, discretization error $\rightarrow$ 0.

**But**, more cycles means more compute needed, and may lead to less interpretable probabilities

Fortunately, we have other correction methods

## Solutions to discrete time error

[![\[Srivastava et. al. 2020\](https://doi.org/10.1101/2020.07.27.20162651)](discretization_corrections.jpg)](https://doi.org/10.1101/2020.07.27.20162651)

## Simpson's method

Numerical process to approximate integrating a curve

**Simpson's 1/3rd method** (quadratic approximation; requires even number of cycles):

-   Multiply reward by 1/3 for first and last cycle

-   In between, multiply by 4/3 for odd cycles and 2/3 for even

S**impson's 3/8 method** (cubic approximation; requires that number of cycles are multiple of 3):

-   Multiply reward by 3/8 in first and last cycle

-   In between, multiply by 6/8 if mult. of 3 and 9/8 otherwise

## Cycle tree approach

-   **Intuition:** If on average individuals transition halfway through a cycle, they should incur half the cost (QALY) associated with their "from" state and half the cost (QALY) of their "to" state

-   Can be implemented as like transition rewards in a reward matrix

$\hat{C}_t =m_{t-1} (P \bigodot C)$ or $\hat{Q}_t =m_{t-1} (P \bigodot Q)$ with C and Q as given on next slide

## Cycle tree transition reward matrices

$$
\textbf{C}= 
\begin{bmatrix}
c_H & .5c_H+.5c_M & .5c_H+.5c_S & .5c_H+.5c_D\\ 
.5c_M+.5c_H & c_M & .5c_M+.5c_S & .5c_M+.5c_D\\ 
.5c_S+.5c_H & .5c_S+.5c_M & c_S & .5c_S+.5c_D\\ 
.5c_D+.5c_H & .5c_D+.5c_M & .5c_D+.5c_S & c_D 
\end{bmatrix},\\
\textbf{Q} =
\begin{bmatrix}
q_H & .5q_H+.5q_M & .5q_H+.5q_S & .5q_H+.5q_D\\ 
.5q_M+.5q_H & q_M & .5q_M+.5q_S & .5q_M+.5q_D\\ 
.5q_S+.5q_H & .5q_S+.5q_M & q_S & .5q_S+.5q_D\\ 
.5q_D+.5q_H & .5q_D+.5q_M & .5q_D+.5q_S & q_D 
\end{bmatrix}
$$

## Comparison of discrete time correction methods

Simpson rule and cycle tree method both good. I find cycle tree method most intuitive.

![[Naimark et. al. 2013](10.1177/0272989X13501558)](discrete_time_correction_compare.png)

## Today

-   Capturing health-economic outcomes

-   Correcting discrete time error

-   **Capturing epidemiological outcomes**

-   Differential equation models

## Why capture epidemiologic outcomes

-   Of interest to decision makers

-   Can used to calibrate or validate your model (more later)

Examples of epidemiological outcomes: survival, prevalence, incidence, lifetime risk

## Survival

-   Number of people not dead at a given point in time

-   For each cycle, sum all states (columns of $M$ matrix) except dead

    -   Equivalently, cohort size minus number in dead state

## Restricted life expectancy

Expected number of remaining time units alive. Integral of survival:

$$
LE = \int_{t=0}^\infty S(t)
$$

In discrete time can calculate as:

$$
LE = \Sigma_{t=0}^\infty S(t)
$$

This is restricted life expectancy; for expected age at death, must add cohorts age at $t=0$.

## Prevalence

-   Proportion of living population in a health state at a specific time.

-   Calculated as ratio of number in state i over number in any state other than dead

-   If multiple model states correspond to health state (e.g., tunnel states), must add them together for the denominator

## Incidence

-   Proportion of population entering health state at $t$

-   For a state $j$:

    -   $m_{t-1} P[:,j]$ is the number entering or staying in state $j$ in cycle $t$

    -   $m_{t-1} P[j,j]$ is the number staying in state $j$ in cycle $t$

    -   $m_{t-1} P[:,j] - m_{t-1} P[j,j]$ is the number entering state $j$ in cycle $t$

-   Divide by number alive at time $t$ to get the incidence as a percent

## Today

-   Capturing health-economic outcomes

-   Correcting discrete time error

-   Capturing epidemiological outcomes

-   **Differential equation models**

## Differential equation models

-   Common type of **continuous time** cohort models

-   Transitions depend on how cohort distributed across states (compartments)

-   Very useful for modeling epidemics

-   Often approximated with difference equations

## Differential eqn vs. (semi-)Markov

Similarities

-   Individual in one state (compartment) at a time

-   Individuals in state treated identically

-   Transition between states over time

Difference:

-   Continuous time (unless using difference eqn approximation)

-   Transition rates depends how population distributed across states in that instant

## SIR model

Three states: [**S**]{.underline}usceptible, [**I**]{.underline}nfectious, [**R**]{.underline}emoved (recovered or dead)

Infection rate $\beta$ governs S $\rightarrow$ I

Removal rate $\mu$ governs S $\rightarrow$ R

![](sir_compartments.png)

## Differential equations for SIR

::: columns
::: {.column width="40%"}
$$
\begin{aligned}
&\frac{dS}{dt}= -\beta S I\\
&\frac{dI}{dt} = \beta S I - \mu I\\
&\frac{dR}{dt} = \mu I
\end{aligned}
$$
:::

::: {.column width="60%"}
$$
\begin{aligned}
&S(t+m) = S(t) + \int_t^m -\beta S I dt\\
&I(t+m) = I(t) + \int_t^m (\beta S I - \mu I)dt\\
&R(t+m) = R(t) + \int_t^m \mu I dt
\end{aligned}
$$
:::
:::

![](sir_compartments.png)

## SIR

![](sir_slide.png)

## Bigger R0 means bigger and faster epidemic

![](R0_comparison.png)

## Difference equations: a discrete approximation

::: columns
::: {.column width="60%"}
$$
\begin{aligned}
&S(t+m) = S(t) + \int_t^m -\beta S I dt\\
&I(t+m) = I(t) + \int_t^m (\beta S I - \mu I)dt\\
&R(t+m) = R(t) + \int_t^m \mu I dt
\end{aligned}
$$
:::

::: {.column width="40%"}
$$
\begin{aligned}
&S_t = S_{t-1} -\beta^* S_{t-1} I_{t_1}\\
\\
&I_t = I_{t-1} + \beta^* S_{t-1} I_{t-1} - \mu^* I_{t-1}\\
\\
&R_t = R_{t-1} + \mu^* I_{t-1}
\end{aligned}
$$
:::
:::

$\beta^*$ and $\mu^*$ are discrete analogs for $\beta$ and $\mu$ and their value depends on the cycle length.

## Open cohorts models

-   While (Semi)Markov models usually closed, differential eqn models sometime open

-   People enter (born, age in, get condition) and leave (die, age out)

-   Cohort size not constant

![](demographic_sir.png)

## Age-structuring

-   In (Semi-)Markov models, separate models used to capture age cohorts

-   For differential eqn model, may need to put age groups in same model for proper transition dynamics

![](age_structured_SIR.png)

## Recap

-   Health-economic outcomes can be added as state rewards and/or transition rewards

-   Cycle tree method corrects discrete time error with a modified transition reward matrix

-   Epidemiological measures can be calculated from a cohort model

-   Differential or discrete time models useful when distribution of population across states influences transitions

## Logistics

-   Assignment 1 due 11:59pm today
    -   If the figures don't show up can submit HTML
-   Assignment 2 posted by tomorrow
    -   Deadline extension: due Friday, Jan 27
